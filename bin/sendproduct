#!/usr/bin/env python

# stdlib imports
import argparse
import os
import shutil
import warnings

# third party imports
from impactutils.transfer.emailsender import EmailSender

# local imports
from product.constants import (BASE_PDL_FOLDER, CFG, JAR, JAVA, PRIVATEKEY,
                               EMAIL_SENDER, SMTP_SERVER)
from product.pdl import store_fault
from product.web_product import WebProduct


def get_parser():
    description = '''Send a finite fault product for event pages.'''
    parser = argparse.ArgumentParser(description=description)

    # Required Arguments
    event_source_description = ("Source of the original event ID. "
                                "(example: us, usp, ci)")
    parser.add_argument('eventsource',
                        help=event_source_description, metavar="EVENT_SOURCE")
    source_description = ("Source of this product "
                          "(i.e., contributor of the product. Example: us).")
    parser.add_argument('source',
                        help=source_description,
                        metavar="FINITE_FAULT_MODEL_SOURCE")
    eid_description = ("Event identification code. For example, if the full "
                       "event is us1000dyad, the source is us and the code "
                       "is 1000dyad.")
    parser.add_argument('eventid', help=eid_description,
                        metavar="EVENT_ID_CODE")
    ffm_description = ("Path to the directory where all of the files for the "
                       "finite fault model are located.")
    parser.add_argument('ffm', help=ffm_description, metavar="PATH_TO_FFM")
    num_description = ("Number for this solution. Note: This is not "
                       "used for versioning.This number specifies the number "
                       "of the valid solutions submitted. For example, if "
                       "two equally valid solutions for two different nodal "
                       "planes are submitted, the first would be '1' and the "
                       "other would be '2'. The last solution submitted will "
                       "be the default model displayed on the event summary "
                       "page.")
    parser.add_argument('solution', help=num_description,
                        metavar="SOLUTION_NUMBER", type=int)
    comment_description = ("Add a comment to the 'View all finite-fault "
                           "products' table. This comment describes the "
                           "solution. (Example: 'Solution 1, where slip is "
                           "constrained.'). The comment length should not exceed 32 characters.")

    # Optional Arguments
    alert_description = ("Send an email alerting the specified emails a "
                         "message stating that the model has been sent. "
                         "Email information includes: eventid, version, etc. "
                         "Example: -a johndoe@service.net janedoe@service.com")
    parser.add_argument("-a", "--alert", dest="alert",
                        help=alert_description, metavar="ALERT", nargs='+')
    comment_description = ("Add a comment to the 'View all finite-fault "
                           "products' table. This comment describes the "
                           "solution. (Example: 'Solution 1, where slip is "
                           "constrained.'). The comment length should not exceed 32 characters.")
    parser.add_argument("-c", "--comment", dest="comment",
                        help=comment_description, metavar="SOLUTION_COMMENT")
    crustal_model_description = ("Updates the model description. By default, "
                                 "the results section describes the seismic "
                                 "moment release as '1D crustal model "
                                 "interpolated from CRUST2.0 (Bassin et "
                                 "al., 2000).'")
    default_crustal_model = ("1D crustal model interpolated from "
                             "CRUST2.0 (Bassin et al., 2000).")
    parser.add_argument("-m", "--crustal-model", dest="crustal_model",
                        help=crustal_model_description,
                        default=default_crustal_model,
                        metavar='CRUSTAL_MODEL')
    review_description = ("Perform a dry run, creating the product for "
                          "review, without sending any files to comcat. "
                          "Default is 'False' (the product is sent to "
                          "comcat).")
    parser.add_argument("-d", "--dry_run", action="store_true",
                        dest="dry_run", default=False,
                        help=review_description)
    suppress_description = ("Suppress the model number. This allows for "
                            "updates of older versions that did not "
                            "include the model-number product property "
                            "or the number tag at the end of the event "
                            "code. Example: An old single solution product "
                            "code would look like us1000dyad while the updated "
                            "product code would look like us1000dyad_1.")
    parser.add_argument("-s", "--suppress-number", dest="suppress_number",
                        help=suppress_description,
                        action="store_true", default=False)
    version_description = ("Add a version number to the finite fault output. "
                           "Default is 1.")
    parser.add_argument("-v", "--version", dest="version",
                        help=version_description,
                        metavar="VERSION", default=1, type=int)
    scientist_reviewed = ("Marks that the sent product was not reviewed by a "
                          "scientist. This will cause a flag to be "
                          "displayed on the web page. Default is 'True'.")
    parser.add_argument("-x", "--not-reviewed", action="store_false",
                        dest="reviewed_by_scientist", default=True,
                        help=scientist_reviewed)
    return parser


def main(args):
    # Specify the version number. Default is 1.
    if args.version is None:
        version = 1
    else:
        version = int(args.version)
        if version < 1:
            raise Exception(
                'Version number less than one %r.' % args.version)

    # Create product from directory
    source = args.source
    eventid = args.eventid
    event_source = args.eventsource
    ffm_dir = args.ffm
    crustal_model = args.crustal_model
    solution_comment = args.comment
    if solution_comment is not None:
        if len(solution_comment) > 32:
            warnings.warn('The comment length exceeds 32 characters!')
    model_number = args.solution
    dry_run = args.dry_run
    suppress = args.suppress_number
    product = WebProduct.fromDirectory(ffm_dir, event_source, eventid, model_number,
                                       crustal_model=crustal_model,
                                       comment=solution_comment,
                                       version=version,
                                       suppress_model=suppress)

    folder = eventid
    if not suppress:
        folder += f"_{model_number}"
    pdlfolder = os.path.join(BASE_PDL_FOLDER, folder)

    # overwrite the folder to stop conflicts
    if os.path.exists(pdlfolder):
        shutil.rmtree(pdlfolder)
    os.makedirs(pdlfolder)
    copy_files(product.paths, pdlfolder)

    if args.reviewed_by_scientist:
        reviewed = True
    else:
        reviewed = False

    num_files, message = send_product(eventid, event_source, product, pdlfolder,
                                      source, reviewed, model_number, dry_run,
                                      suppress)
    if dry_run:
        msg = ("Dry run performed. Product files were written to "
               f"{pdlfolder}. Dry run pdl command: {message}")
    else:
        msg = (f"{num_files} files sent to COMCAT. Sent product files "
               f"were written to {pdlfolder}. Comcat message: "
               f"{message}")

    print(msg)

    if args.alert is not None:
        if num_files <= 0 and not dry_run:
            print('No files were sent, so no emails will be sent.')
        else:
            send_email(args)


def copy_files(file_directory, pdl_directory):
    for key in file_directory:
        current = file_directory[key][0]
        future = os.path.join(pdl_directory, file_directory[key][1])
        shutil.copy2(current, future)


def send_email(args):
    props = {}
    props['recipients'] = args.alert
    props['message'] = (f'A finite fault model has been submitted for '
                        f'{args.eventsource}{args.eventid} version {args.version}. '
                        f'This is solution number {args.solution}.')
    props['subject'] = 'Finite Fault Submission Notification'
    props['smtp_servers'] = [SMTP_SERVER]
    props['sender'] = EMAIL_SENDER
    if EMAIL_SENDER is None or SMTP_SERVER is None:
        arguments = ("\nemail:\n    smtp: <SMTP SERVER>\n    sender: "
                     "<SENDER EMAIL ADDRESS>")
        print(f"Email sender and/or SMTP server are not specified in "
              ".faultproduct.yaml, so the email cannot be sent. Specify "
              f"these parameters in the file as '{arguments}'.")
    elif args.dry_run:
        print(f"Dry run. Email(s) would be se sent to {props['recipients']} "
              f"from {props['sender']}, with subject '{props['subject']}' "
              f"and message '{props['message']}'.")
    else:
        sender = EmailSender(properties=props, local_files=[])
        sender.send()


def send_product(eventid, network, product, pdlfolder, source, reviewed,
                 number, dry_run, suppress):
    """
    Configure pdl and send product directory.
    """
    if not os.path.exists(JAVA):
        raise FileNotFoundError("File does not exist %r." % JAVA)
    if not os.path.exists(JAR):
        raise FileNotFoundError("File does not exist %r." % JAR)
    if not os.path.exists(CFG):
        raise FileNotFoundError("File does not exist %r." % CFG)
    if not os.path.exists(PRIVATEKEY):
        raise FileNotFoundError("File does not exist %r." % PRIVATEKEY)
    files, msg = store_fault(CFG, network, eventid, JAR, JAVA,
                             pdlfolder, PRIVATEKEY, source, product.properties, reviewed,
                             number, dry_run, suppress=suppress)
    return (files, msg)


if __name__ == '__main__':
    parser = get_parser()
    pargs, unknown = parser.parse_known_args()
    main(pargs)
